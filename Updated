using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;



namespace Assigment_1
{
    //global variables
    public static class Globals
    {
        public static uint MAX_LEVEL = 60;
        public static uint GEAR_SLOTS = 14;
        public static int MAX_INVENTORY_SIZE = 20;
        public static uint MAX_ILLVL = 360;
        public static uint MAX_PRIMARY = 200;
        public static uint MAX_STAMINA = 275;
        
    }

    //Types of items
    public enum ItemType
    {
        Helmet, Neck, Shoulders, Back, Chest,
        Wrist, Gloves, Belt, Pants, Boots,
        Ring, Trinket
    };

    //Races
    public enum Race { Orc, Troll, Tauren, Forsaken };

    public class ItemExistException : Exception // Deriving from the "Exception" base class
    {
        public override string ToString()
        {
            return "That item does not exist!";
        }
    }

    public class PlayerExistException : Exception // Deriving from the "Exception" base class
    {
        public override string ToString()
        {
            return "That player does not exist!";
        }
    }

    /*Guild Class
     * creates a guild object with an id and a name
     * */
    public class Guild : IComparable
    {
        //guild vars
        private uint id;
        private string name;

        //public properties
        #region

        //Free R/W
        public uint Id
        {
            get { return id; }
            set { id = value; }
        }

        //Free R/W
        public string Name
        {
            get { return name; }
            set { name = value; }
        }
        #endregion

        /*Default constructor 
         * no arguments
         * */
        public Guild()
        {
            Id = 0;
            Name = "";
        }

        /*Default constructor 
         * arguments for id and name
         * */
        public Guild(uint iId, string iName)
        {
            Id = iId;
            Name = iName;
        }


        /* To string
         * Output the guild
         * */
        public override string ToString()
        {
            //Displays the guild id and name
            string output = String.Format("{0}", this.Name);
            return output;
        }


        /*IComparable
        * overrides comparable
        * */
        public int CompareTo(object alpha)
        {
            //Check for null values
            if (alpha == null) return 1;

            //typecast
            Guild rightOp = alpha as Guild;

            //Items are compared by name
            if (rightOp != null)
                return Name.CompareTo(rightOp.Name);
            else
                throw new ArgumentException("Guild CompareTo argument is not an item");
        }
    }


    /* Player Class
     * Player Object has an id, name, race, level, exp, guildID, gear,inventory
     * */
    public class Player : IComparable
    {
        
        //attributes of player class
        private uint id;
        private string name;
        private Race playerRace;
        private uint level;
        private uint exp;
        private uint guildID;
        private uint[] gear;
        private List<uint> inventory;

        //public properties
        #region
        //R only
        public uint Id
        {
            get { return id; }
            private set { id = value; }
        }

        //R only
        public string Name
        {
            get { return name; }
            private set { name = value; }
        }

        //R only, 4 possible races
        public Race PlayerRace
        {
            get { return playerRace; }
            private set
            {
                if (value >= (Race)0 || value <= (Race)3)
                    playerRace = value;
                else
                {
                    Console.WriteLine(value + " is not a valid race id");
                }
            
                
            }
        }

        //Free R/W, [0, MAX_LEVEL]
        public uint Level
        {
            get { return level; }
            set
            {
                if (value >= 0 || value <= Globals.MAX_LEVEL)
                    level = value;
                else
                {
                    Console.WriteLine(value + "is not a valid level");
                }
            }
        }

        //Normal R access, W acces increments exp and increases level appropriatly
        public uint Exp
        {
            get { return exp; }
            set
            {
                exp = exp + value;
                addExp(value);
            }
        }

        public uint GuildID
        {
            get { return guildID; }
            set { guildID = value; }
        }

        #endregion
        //indexer for gear
        public uint this[uint index]
        {
            get { return gear[index]; }
            set { gear[index] = value; }
        }

        /*addExp
         * adds experience to the character, 
         * increases level when more than (current level*1000) experince is awarded
         * */
        private void addExp(uint newExp)
        {
            //add experience
            
            while(newExp >= this.Level * 1000 && this.Level != Globals.MAX_LEVEL)
            {
                this.Level++;
                newExp = newExp - this.Level * 1000;
                Console.WriteLine("Ding!");
            }
             
        }

        /* Default Constructor
         * No Arguments
         * */
        public Player()
        {
            Id = 0;
            Name = "";
            PlayerRace = 0;
            Level = 1;
            Exp = 0;
            GuildID = 0;
            gear = new uint[Globals.GEAR_SLOTS];
            
        }

        /* Constructor
         * Arguments are id, name, race, level, exp, guildID, and every item type
         * */
        public Player(uint iID, string iName, Race iPlayerRace, uint iLevel, uint iExp, uint iGuildID,
            uint helmet, uint neck, uint shoulders, uint back, uint chest, uint wrist, uint gloves, uint belt, uint pants, uint boots, uint ring1, uint ring2, uint trinket1, uint trinket2)
        {
            Id = iID;
            Name = iName;
            PlayerRace = iPlayerRace;
            Level = iLevel;
            Exp = iExp;
            GuildID = iGuildID;
            gear = new uint[Globals.GEAR_SLOTS];
            gear = new uint[] { helmet, neck, shoulders, back, chest, wrist, gloves, belt, pants, boots, ring1, ring2, trinket1 , trinket2};
            
        }

        /* Equip Gear
         * takes item id and equips the item
         * */
         public void EquipGear(uint gearID)
        {
            try
            {
                //see if item exists
                //see if item level is valid
                //insert into gear slot
            }
            catch(ItemExistException itemException)
            {
                Console.WriteLine(itemException);
            }

            //if the item exists
            Console.WriteLine(this.Name + " has successfully equipped " + Program.dictItems[gearID].Name + "!"); 

        }

        /*To String
         * outputs player name, race, level, and guild
         * */
        public override string ToString()
        {
            //Displays the player name, race, level, and guild
            string raceString = "" + (Race)this.PlayerRace;
            string levelString = "" + this.Level;
            //if the player is in a guild it will say which guild, if not then nothing
            string guildString = "";
            if (Program.dictGuilds.ContainsKey( this.guildID ))
            {
                guildString = "Guild: " + Program.dictGuilds[this.guildID];
            }

            string output = String.Format("Name: {0}Race: {1} Level: {2}{3}",  this.Name.PadRight(20), raceString.PadRight(10), levelString.PadRight(10),guildString);
            
            return output;
        }


        /*IComparable
         * overrides comparable
         * */
        public int CompareTo(object alpha)
        {
            //Check for null values
            if (alpha == null) return 1;

            //typecast
            Player rightOp = alpha as Player;

            //Items are compared by name
            if (rightOp != null)
                return Name.CompareTo(rightOp.Name);
            else
                throw new ArgumentException("Player CompareTo argument is not an Player");
        }

    }   



    /*Item Class
     * Item object has an id, name, type, ilvl, primary, stamina, requirement and flavor attributes
     * implements IComparable interface
     * * * */
    public class Item : IComparable
    {

        //private attributes
        private uint id;
        private string name;
        private ItemType type;
        private uint ilvl;
        private uint primary;
        private uint stamina;
        private uint requirement;
        private string flavor;


        //public properties
        #region
        //R only
        public uint Id
        {
            get { return id; }
            private set { id = value; }
        }

        //Free R/W
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        //Free R/W, [0, 12]
        public ItemType Type
        {
            get { return type; }
            set
            {
                if (value >= (ItemType)0 || value <= (ItemType)11)
                    type = value;
                else
                {
                    Console.WriteLine(value + " is not a valid item type");
                }
            }
        }

        //Free R/W, [0, MAX_ILLVL]
        public uint Ilvl
        {
            get { return ilvl; }
            set
            {
                if (value >= 0 || value <= Globals.MAX_ILLVL)
                    ilvl = value;
                else
                {
                    Console.WriteLine(value + " is not a valid level");
                }
            }
        }

        //Free R/W, [0, MAX_PRIMARY]
        public uint Primary
        {
            get { return primary; }
            set
            {
                if (value >= 0 || value <= Globals.MAX_PRIMARY)
                    primary = value;
                else
                {
                    Console.WriteLine(value + " is not a valid Primary");
                }
            }
        }

        //Free R/W, [0, MAX_STAMINA]
        public uint Stamina
        {
            get { return stamina; }
            set
            {
                if (value >= 0 || value <= Globals.MAX_STAMINA)
                    stamina = value;
                else
                {
                    Console.WriteLine(value + " is not valid stamina");
                }
            }
        }

        //Free R/W, [0, MAX_LEVEL]
        public uint Requirement
        {
            get { return requirement; }
            set
            {
                if (value >= 0 || value <= Globals.MAX_LEVEL)
                    requirement = value;
                else
                {
                    Console.WriteLine(value + "is not a valid requirement");
                }
            }
        }

        //Free R/W
        public string Flavor
        {
            get { return flavor; }
            set { flavor = value; }

        }
        #endregion



        /*Constructor
         * default constructor
         * */
        public Item()
        {
            Id = 0;
            Name = "";
            Type = 0;
            Ilvl = 0;
            Primary = 0;
            Stamina = 0;
            Requirement = 0;
            Flavor = "";
            
        }


        /*Constructor
         * constructor with all arguments
         * */
        public Item(uint iId, string iName, ItemType iType, uint iIlvl, uint iPrimary, uint iStamina, uint iRequirement, string iFlavor)
        {
            Id = iId;
            Name = iName;
            Type = iType;
            Ilvl = iIlvl;
            Primary = iPrimary;
            Stamina = iStamina;
            Requirement = iRequirement;
            Flavor = iFlavor;
        }

        /* To String Method
         * overrides toString() method so that items can be output
         * */
        public override string ToString()
        {
            //Displays the item type, name, ilvl, requirement, and flavor
            string output =  String.Format("({0}) {1} |{2}| --{3}--\n\t\"{4}\"", this.Type , this.Name, this.Ilvl, this.Requirement, this.Flavor);
            return output;
        }


        /*IComparable
         * overrides comparable
         * */
        public int CompareTo(object alpha)
        {
            //Check for null values
            if (alpha == null) return 1;
            
            //typecast
            Item rightOp = alpha as Item;

            //Items are compared by name
            if (rightOp != null)
                return Name.CompareTo(rightOp.Name);
            else
                throw new ArgumentException("Item CompareTo argument is not an item");
        }
    }



    public static class Program
    {
        //Files for input
        public static string PLAYERS_FILE = "players.txt";
        public static string GUILDS_FILE = "guilds.txt";
        public static string EQUIPMENT_FILE = "equipment.txt";

        //Create Dictionary for Guilds
        public static Dictionary<uint, string> dictGuilds = new Dictionary<uint, string>();
        //Create Dictionary for Players
        public static Dictionary<uint, Player> dictPlayers = new Dictionary<uint, Player>();
        //Create Dictionary for items
        public static Dictionary<uint, Item> dictItems = new Dictionary<uint, Item>();



        /*Main method
         * read the files and converts them into objects of proper type
         * gives user options to call certain methods 
         * */
        public static int Main()
        {
            Console.WriteLine("Welcome to the World of ConflictCraft: Testing Environment!\n");

            //Read in Guilds
            ReadGuilds(GUILDS_FILE);
            //Read in Players
            ReadPlayers( PLAYERS_FILE);
            //read in items
            ReadItems( EQUIPMENT_FILE);


            string a = "";
            do
            {
                //show message and options
                DisplayOptions();

                a = Console.ReadLine();

                switch (a.ToString())
                {
                    //Print all Players
                    case "1":
                        ListPlayers();
                        break;

                    //Print All Guilds
                    case "2":
                        ListGuilds();
                        break;

                    //Print all gear
                    case "3":
                        ListItems();
                        break;

                    //Print Gear List for Player
                    case "4":
                        //Ask for name
                        Console.Write("Enter the Player Name: ");
                        string gearPlayerName = Console.ReadLine();
                        PrintPlayerGear(gearPlayerName);
                        break;
                        
                    //Leave Guild
                    case "5":

                        break;

                    //Join Guild
                    case "6":

                        break;

                    //Equip Gear
                    case "7":
                        //Ask for name
                        Console.Write("Enter the Player Name: ");
                        string equipPlayerName = Console.ReadLine();
                        //Ask for name of item
                        Console.Write("Enter the item name they will equip: ");
                        string equipItemName = Console.ReadLine();
                        try
                        {
                            dictPlayers[PlayerNameToID(equipPlayerName)].EquipGear(ItemNameToID(equipItemName));
                        }
                        catch(PlayerExistException playerException)
                        {
                            Console.WriteLine(playerException);
                        }
                        catch(ItemExistException itemException)
                        {
                            Console.WriteLine(itemException);
                        }

                        break;

                    //Unequip Gear
                    case "8":

                        break;

                    //Award Experience
                    case "9":

                        break;

                    //Icomparable test
                    case "T":

                        break;


                    //all available options to quit out of program
                    //When any are input turn into 10, which exits out of loop
                    case "10":
                    case "q":
                    case "Q":
                    case "quit":
                    case "Quit":
                    case "exit":
                    case "Exit":
                        a = "10";
                        break;

                    //When no valid input recieved
                    default:
                        Console.WriteLine(a + " is not an option.");
                        break;
                }
            }
            while (a != "10");

            return 0;
        }


        /* Read in Guilds
         * takes the file to get data from
         * put guilds from file into dictionary
         * */
        public static void ReadGuilds( string input)
        {
            //string to read lines into
            string tempLine;
            //try block to catch filenotfound
            try
            {
                using (StreamReader inFile = new StreamReader(input))
                {
                    //priming the read
                    tempLine = inFile.ReadLine();
                    //while there is still data in the file
                    while (tempLine != null)
                    {
                        //get each piece of the guild separated by tab into an array
                        string[] inGuilds = tempLine.Split('\t');
                        //if the correct number of attributes are on the line, create a guild from line
                        if (inGuilds.Length == 2)
                        {
                            //Create the guild from the array
                            Guild tempGuild = new Guild(Convert.ToUInt32(inGuilds[0]), inGuilds[1]);
                            //add to dictionary of items
                            dictGuilds.Add(tempGuild.Id, tempGuild.Name);

                        }//end of if length

                        //read next line
                        tempLine = inFile.ReadLine();
                    }//end of while
                }//end of using, items have been read in
            }//end of try
            catch (FileNotFoundException)
            {
                Console.WriteLine(input + "file does not exist");
            }
        }

        /*List Guilds method
         * prints out each Guild from a dictionary of guilds
         * */
        public static void ListGuilds()
        {
            foreach (KeyValuePair<uint, string> pair in dictGuilds)
            {
                Console.WriteLine("{0}", pair.Value);
            }
        }



        /* Read in Players
         * takes the file the players are stored in
         * puts the items into the dictionary
         * */
        public static void ReadPlayers( string input)
        {
            //string to read lines into
            string tempLine;
            //try block to catch filenotfound
            try
            {
                using (StreamReader inFile = new StreamReader(input))
                {
                    //priming the read
                    tempLine = inFile.ReadLine();
                    //while there is still data in the file
                    while (tempLine != null)
                    {
                        //get each piece of the player separated by tab into an array
                        string[] inPlayers = tempLine.Split('\t');
                        //if the correct number of attributes are on the line, create a player from line
                        if (inPlayers.Length == 20)
                        {
                            
                            //Create the player from the array, convert string to uints and other attributes when necessary
                            Player tempPlayer = new Player(Convert.ToUInt32(inPlayers[0]), inPlayers[1], (Race)Convert.ToUInt32(inPlayers[2]), Convert.ToUInt32(inPlayers[3]), Convert.ToUInt32(inPlayers[4]), Convert.ToUInt32(inPlayers[5]), 
                                Convert.ToUInt32(inPlayers[6]), Convert.ToUInt32(inPlayers[7]), Convert.ToUInt32(inPlayers[8]), Convert.ToUInt32(inPlayers[9]), Convert.ToUInt32(inPlayers[10]), Convert.ToUInt32(inPlayers[11]), Convert.ToUInt32(inPlayers[12]), Convert.ToUInt32(inPlayers[13]), Convert.ToUInt32(inPlayers[14]), Convert.ToUInt32(inPlayers[15]), Convert.ToUInt32(inPlayers[16]), Convert.ToUInt32(inPlayers[17]), Convert.ToUInt32(inPlayers[18]), Convert.ToUInt32(inPlayers[19]));

                            //add to dictionary of players
                            dictPlayers.Add(tempPlayer.Id, tempPlayer);
                            
                        }//end of if length

                        //read next line
                        tempLine = inFile.ReadLine();
                    }//end of while
                }//end of using, items have been read in
            }//end of try
            catch (FileNotFoundException)
            {
                Console.WriteLine(input + "file does not exist");
            }
        }

        /*List Players method
         * prints out each player from a dictionary of players
         * */
        public static void ListPlayers()
        {
            //for every player in the dictionary print it out
            foreach (KeyValuePair<uint, Player> pair in dictPlayers)
            {
                
                Console.WriteLine("{0}", pair.Value);
                
            }
        }

        /* PlayerNameToID
         * returns an id if it is valid, throws PlayerExistException if invalid
         * */
         public static uint PlayerNameToID(string pName)
        {
            
            //default return is 0
            uint id = 0;

            foreach (KeyValuePair<uint, Player> pair in dictPlayers)
            {
                if(pair.Value.Name == pName)
                {
                    id = pair.Key;
                }
            }

            if(id == 0)
            {
                throw new PlayerExistException();
            }

            return id;
        }

        /* PrintPlayerGear
         * prints out the player gear that is equipped
         * takes player id
         * */
        public static void PrintPlayerGear(string playerName)
        {
            try
            {
                //will throw a PlayerExistException if player doesn't exist
                uint playerID = PlayerNameToID(playerName);
                //For each slot of a player, print out the gear
                for (uint i = 0; i < Globals.GEAR_SLOTS; i++)
                {
                    //Print
                    if (dictItems.ContainsKey(dictPlayers[playerID][i]))
                    {
                        Console.WriteLine(dictItems[dictPlayers[playerID][i]]);
                    }
                    else
                    {
                        uint slot = i;
                        switch (slot)
                        {
                            //11th gear slot is 10th item type
                            case 11:
                                slot--;
                                break;
                            //12th gear slot is 11th item type
                            case 12:
                                slot--;
                                break;
                            //13th gear slot is 11th item type
                            case 13:
                                slot = slot - 2;
                                break;
                        }


                        Console.WriteLine("(" + (ItemType)slot + ") None\n");
                    }
                }
            }
            catch (PlayerExistException except)
            {

                System.Console.WriteLine(except);
            }
        
        }


        /* Read in Items
         * takes the file the items are stored in
         * puts the items into the dictionary
         * */
        public static void ReadItems( string input)
        {
            //string to read lines into
            string tempLine;
            //try block to catch filenotfound
            try
            {
                using (StreamReader inFile = new StreamReader(input))
                {
                    //priming the read
                    tempLine = inFile.ReadLine();
                    //while there is still data in the file
                    while (tempLine != null)
                    {
                        //get each piece of the item separated by tab into an array
                        string[] inItems = tempLine.Split('\t');
                        //if the correct number of attributes are on the line, create an item from line
                        if (inItems.Length == 8)
                        {
                            //Create the item from the array, convert string to uints and ItemTypes when necessary
                            Item tempItem = new Item(Convert.ToUInt32(inItems[0]), inItems[1], (ItemType)Convert.ToUInt32(inItems[2]), Convert.ToUInt32(inItems[3]), Convert.ToUInt32(inItems[4]), Convert.ToUInt32(inItems[5]), Convert.ToUInt32(inItems[6]), inItems[7]);
                            //add to dictionary of items
                            dictItems.Add(tempItem.Id, tempItem);

                        }//end of if length

                        //read next line
                        tempLine = inFile.ReadLine();
                    }//end of while
                }//end of using, items have been read in
            }//end of try
            catch (FileNotFoundException)
            {
                Console.WriteLine(input + "file does not exist");
            }
        }

        /*List Items method
         * prints out each item from a dictionary of items
         * */
        public static void ListItems()
        {
            foreach (KeyValuePair<uint, Item> pair in dictItems)
            {
                Console.WriteLine("{0}", pair.Value);
            }
        }

        /* ItemNameToID
         * asks for a name and returns an id if it is valid, throws ItemExistException if invalid
         * */
        public static uint ItemNameToID(string iName)
        {

            //default return is 0
            uint id = 0;

            foreach (KeyValuePair<uint, Item> pair in dictItems)
            {
                if (pair.Value.Name == iName)
                {
                    id = pair.Key;
                }
            }

            if( id == 0)
            {
                throw new ItemExistException();
            }

            return id;
        }

        /* Displays Options
         * displays an introduction and the options for the program
         * */
        public static void DisplayOptions()
        {
            Console.WriteLine("\nWelcome to World of ConflictCraft: Testing Environment. Please select an option from the list below:");
            Console.WriteLine("\t1.) Print All Players");
            Console.WriteLine("\t2.) Print All Guilds");
            Console.WriteLine("\t3.) List All Gear");
            Console.WriteLine("\t4.) Print Gear List for Player");
            Console.WriteLine("\t5.) Leave Guild");
            Console.WriteLine("\t6.) Join Guild");
            Console.WriteLine("\t7.) Equip Gear");
            Console.WriteLine("\t8.) Unequip Gear");
            Console.WriteLine("\t9.) Award Experience");
            Console.WriteLine("\t10.) Quit");

        }
    }
}
